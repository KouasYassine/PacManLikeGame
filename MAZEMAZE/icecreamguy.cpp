#include "icecreamguy.h"
#include <Imagine/Graphics.h>
#include <cmath>
#include <string>
#include <cstdlib>
#include <ctime>
#include <random>
#include <iostream>
#include <cassert>
#include"outils.h"
using namespace Imagine;
using namespace std;

const int z=30; //Taille d'une case

void  icecreamguy::Drawguy(Point B){

    const int N=30;
    std::vector<std::string> spriteTex = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000033000000000000000",
        "000000000000311300000000000000",
        "000000000003111130000000000000",
        "000000000031111113000000000000",
        "000000000311111111300000000000",
        "000000003111111111113000000000",
        "000000311111111111111130000000",
        "000003111222211122221113000000",
        "000031112111121211112111300000",
        "333331111111111111111111333330",
        "311131111111111111111111311130",
        "311133111112222222111113311130",
        "333330031111222221111300333330",
        "0000000003111222111130000000000",
        "000000000003111111300000000000",
        "000000000311311113113000000000",
        "000000000311333333113000000000",
        "000000000333300003333000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"
    };

    // 2) Allocation dynamique d'un bloc contigu de N*N entiers
    int* grid = new int[N * N];
    Color col;

    // 3) Conversion des '0'/'1' du spriteTex en int dans grid[]
    for(int y = 0; y < N;y++) {
        for(int x = 0; x < N;x++) {
            char c = spriteTex[y][x];
            grid[y * N + x] = (c == '1' ? 1 : 0);
            switch (c) {
            case '0': col = WHITE; break;
            case '1': col = Color(255, 182, 193); break;
            case '2': col = BLACK; break;
            case '3': col = Color(165,42,42); break;
            case '4': col = BLUE; break;
            default:  col = Color(100,100,100); break;
            }
            drawPoint(x+z*B.j,y+z*B.i,col);
        }
    }
}

void  icecreamguy::Drawhappyguy(Point B){

  const int N=30;
  std::vector<std::string> spriteTex = {
      "000000000400004000000000000000",
      "000000000040004000040000000000",
      "000000000404004000400000000000",
      "000000000040033004000000000000",
      "000000444400311300444400000000",
      "000000000003111130000000000000",
      "000000000031111113000000000000",
      "033333000311111111300000333330",
      "031113003111111111113000311130",
      "031113311111111111111130311130",
      "033333111222211122221113333330",
      "000031112111121211112111300000",
      "000031111111111111111111300000",
      "000031111111111111111111300000",
      "000033111112222222111113300000",
      "000000031111222221111300000000",
      "000000000311122211113000000000",
      "000000000003111111300000000000",
      "000000000311311113113000000000",
      "000000000311333333113000000000",
      "000000000333300003333000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000"
  };

  // 2) Allocation dynamique d'un bloc contigu de N*N entiers
  int* grid = new int[N * N];
  Color col;

  // 3) Conversion des '0'/'1' du spriteTex en int dans grid[]
  for(int y = 0; y < N;y++) {
      for(int x = 0; x < N;x++) {
          char c = spriteTex[y][x];
          grid[y * N + x] = (c == '1' ? 1 : 0);
          switch (c) {
          case '0': col = WHITE; break;
          case '1': col = Color(255, 182, 193); break;
          case '2': col = BLACK; break;
          case '3': col = Color(165,42,42); break;
          case '4': col = BLUE; break;
          default:  col = Color(100,100,100); break;
          }
          drawPoint(x+z*B.j,y+z*B.i,col);
      }
  }
}

void  icecreamguy::Drawhurtguy(Point B){


  const int N=30;
  std::vector<std::string> spriteTex = {
      "000000000400004000000000000000",
      "000000000040004000040000000000",
      "000000000404004000400000000000",
      "000000000040033004000000000000",
      "000000444400311300444400000000",
      "000000000003111130000000000000",
      "000000000031111113000000000000",
      "033333000311111111300000333330",
      "031113003111111111113000311130",
      "031113311111111111111130311130",
      "033333111211211121121113333330",
      "000031111122111112211111300000",
      "000031111211211121121111300000",
      "000031111111112111111111300000",
      "000033111111121211111113300000",
      "000000031111211121111300000000",
      "000000000311111111113000000000",
      "000000000003111111300000000000",
      "000000000311311113113000000000",
      "000000000311333333113000000000",
      "000000000333300003333000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000"
  };

  // 2) Allocation dynamique d'un bloc contigu de N*N entiers
  int* grid = new int[N * N];
  Color col;

  // 3) Conversion des '0'/'1' du spriteTex en int dans grid[]
  for(int y = 0; y < N;y++) {
      for(int x = 0; x < N;x++) {
          char c = spriteTex[y][x];
          grid[y * N + x] = (c == '1' ? 1 : 0);
          switch (c) {
          case '0': col = WHITE; break;
          case '1': col = Color(255, 182, 193); break;
          case '2': col = BLACK; break;
          case '3': col = Color(165,42,42); break;
          case '4': col = BLUE; break;
          default:  col = Color(100,100,100); break;
          }
          drawPoint(x+z*B.j,y+z*B.i,col);
      }
  }
}
void icecreamguy::Move(Point dir){
  pos=pos+dir;
}
void icecreamguy::Deleteguy(Point B){
  for (int j=0;j<z;j++){
      for (int i=0;i<z;i++){
          drawPoint(i+z*B.j,j+z*B.i,WHITE);
      }
  }
}
